import io
import os
from dotenv import load_dotenv
import asyncio
from aiogram import Bot, Dispatcher, types
from paddleocr import PaddleOCR
from PIL import Image
import numpy as np

load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR (—Ä—É—Å—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
ocr = PaddleOCR(use_angle_cls=True, lang='ru')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message()
async def handle_photo(message: types.Message):
    if not message.photo:
        return

    await message.answer("üì∑ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ. –ù–∞—á–∏–Ω–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
    photo = message.photo[-1]
    photo_file = io.BytesIO()
    await bot.download(photo, destination=photo_file)
    photo_file.seek(0)

    # –í—Å—ë –¥–∞–ª—å—à–µ ‚Äî —Å—Ç—Ä–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Å –æ—Ç—Å—Ç—É–ø–æ–º!
    image = Image.open(photo_file).convert('RGB')
    image_np = np.array(image)

    result = ocr.ocr(image_np, cls=True)

    text_result = ''
    for line in result[0]:
        text_result += line[1][0] + '\n'

    if text_result.strip():
        await message.answer(f"‚úÖ –í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n\n{text_result}")
    else:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

async def main():
    dp.message.register(handle_photo)
    await bot.delete_webhook(drop_pending_updates=True)
    print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PaddleOCR. –ñ–¥—É —Ñ–æ—Ç–æ...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
