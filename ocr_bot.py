from aiogram import Bot, Dispatcher, types
import pytesseract
from PIL import Image
import io
import os
from dotenv import load_dotenv
import asyncio

load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_TOKEN')
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@dp.message()
async def handle_photo(message: types.Message):
    if not message.photo:
        return

    await message.answer("üì∑ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
    photo = message.photo[-1]
    photo_file = io.BytesIO()
    await bot.download(photo, destination=photo_file)
    photo_file.seek(0)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º
    image = Image.open(photo_file)
    text = pytesseract.image_to_string(image, lang='rus')

    if text.strip():
        await message.answer(f"‚úÖ –í–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å:\n\n{text}")
    else:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

async def main():
    dp.message.register(handle_photo)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
